// @generated by protoc-gen-es v2.5.2 with parameter "target=js+dts,import_extension=.js"
// @generated from file db/list_token.proto (package stately.db, syntax proto3)
/* eslint-disable */

import type { Message } from "@bufbuild/protobuf";
import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";

/**
 * Describes the file db/list_token.proto.
 */
export declare const file_db_list_token: GenFile;

/**
 * ListToken is an opaque token that can be used to continue (paginate) or sync
 * results from a previous List operation.
 *
 * @generated from message stately.db.ListToken
 */
export declare type ListToken = Message<"stately.db.ListToken"> & {
  /**
   * token_data will always be returned, and can be used to expand the result
   * set via ContinueList (if can_continue is true), or to get changed items
   * within the result set via SyncList (if can_sync is true). The token_data
   * itself is opaque and cannot be parsed or modified by clients.
   *
   * @generated from field: bytes token_data = 1;
   */
  tokenData: Uint8Array;

  /**
   * can_continue indicates that there are more results available by expanding
   * the pagination window by calling ContinueList with this token.
   *
   * @generated from field: bool can_continue = 2;
   */
  canContinue: boolean;

  /**
   * can_sync indicates that you could call SyncList with this token later to
   * get updated items. This is determined by the type of store you're listing
   * from.
   *
   * @generated from field: bool can_sync = 3;
   */
  canSync: boolean;

  /**
   * schema_version_id represents the version of the schema that was used to
   * generate token_data. For ContinueList calls, you must ensure the client's
   * schema version and this field are the same. A mismatch between the two
   * will result in a SchemaVersionMismatch error. For SyncList calls, you
   * only need to ensure you handle Reset events correctly by clearing your
   * local state and consuming a new list of items as Stately will handle
   * re-send items in the correct version along with a new token at the end.
   *
   * @generated from field: uint32 schema_version_id = 4;
   */
  schemaVersionId: number;
};

/**
 * Describes the message stately.db.ListToken.
 * Use `create(ListTokenSchema)` to create a new message.
 */
export declare const ListTokenSchema: GenMessage<ListToken>;
