// @generated by protoc-gen-es v2.1.0 with parameter "target=js+dts,import_extension=.js"
// @generated from file db/scan_root_paths.proto (package stately.db, syntax proto3)
/* eslint-disable */

import type { Message } from "@bufbuild/protobuf";
import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";

/**
 * Describes the file db/scan_root_paths.proto.
 */
export declare const file_db_scan_root_paths: GenFile;

/**
 * @generated from message stately.db.ScanRootPathsRequest
 */
export declare type ScanRootPathsRequest = Message<"stately.db.ScanRootPathsRequest"> & {
  /**
   * store_id is a globally unique Store ID, which can be looked up from the
   * console or CLI.
   *
   * @generated from field: uint64 store_id = 1;
   */
  storeId: bigint;

  /**
   * Limit sets an upper bound on how many root paths to return.
   *
   * @generated from field: uint32 limit = 2;
   */
  limit: number;

  /**
   * pagination_token is an optional token to continue retrieving the next page of results.
   * This value must be read from a ScanRootPathsResponse and passed with a clone of the
   * previous request to fetch the next page of data
   *
   * @generated from field: bytes pagination_token = 3;
   */
  paginationToken: Uint8Array;

  /**
   * schema_version_id is the version of the schema to base all queries on.
   *
   * @generated from field: uint32 schema_version_id = 4;
   */
  schemaVersionId: number;
};

/**
 * Describes the message stately.db.ScanRootPathsRequest.
 * Use `create(ScanRootPathsRequestSchema)` to create a new message.
 */
export declare const ScanRootPathsRequestSchema: GenMessage<ScanRootPathsRequest>;

/**
 * @generated from message stately.db.ScanRootPathsResponse
 */
export declare type ScanRootPathsResponse = Message<"stately.db.ScanRootPathsResponse"> & {
  /**
   * results is a list that contains one entry for each root path that was found.
   *
   * @generated from field: repeated stately.db.ScanRootPathResult results = 1;
   */
  results: ScanRootPathResult[];

  /**
   * This field is optional and will be set if there are more query results to fetch.
   * To fetch the next page of results you must make the exact same ScanRootPathsRequest as before
   * but set ScanRootPathsRequest.pagination_token to the value returned here.
   *
   * @generated from field: bytes pagination_token = 2;
   */
  paginationToken: Uint8Array;
};

/**
 * Describes the message stately.db.ScanRootPathsResponse.
 * Use `create(ScanRootPathsResponseSchema)` to create a new message.
 */
export declare const ScanRootPathsResponseSchema: GenMessage<ScanRootPathsResponse>;

/**
 * @generated from message stately.db.ScanRootPathResult
 */
export declare type ScanRootPathResult = Message<"stately.db.ScanRootPathResult"> & {
  /**
   * key_path is a single root key path. Users can Query by this root path to
   * get all of the items under it.
   *
   * @generated from field: string key_path = 1;
   */
  keyPath: string;
};

/**
 * Describes the message stately.db.ScanRootPathResult.
 * Use `create(ScanRootPathResultSchema)` to create a new message.
 */
export declare const ScanRootPathResultSchema: GenMessage<ScanRootPathResult>;
