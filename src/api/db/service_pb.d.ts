// @generated by protoc-gen-es v2.1.0 with parameter "target=js+dts,import_extension=.js"
// @generated from file db/service.proto (package stately.db, syntax proto3)
/* eslint-disable */

import type { GenFile, GenService } from "@bufbuild/protobuf/codegenv1";
import type { ContinueListRequestSchema } from "./continue_list_pb.js";
import type { DeleteRequestSchema, DeleteResponseSchema } from "./delete_pb.js";
import type { GetRequestSchema, GetResponseSchema } from "./get_pb.js";
import type { BeginListRequestSchema, ListResponseSchema } from "./list_pb.js";
import type { PutRequestSchema, PutResponseSchema } from "./put_pb.js";
import type {
  ScanRootPathsRequestSchema,
  ScanRootPathsResponseSchema,
} from "./scan_root_paths_pb.js";
import type { SyncListRequestSchema, SyncListResponseSchema } from "./sync_list_pb.js";
import type { TransactionRequestSchema, TransactionResponseSchema } from "./transaction_pb.js";

/**
 * Describes the file db/service.proto.
 */
export declare const file_db_service: GenFile;

/**
 * DatabaseService is the service for creating, reading, updating and deleting data
 * in a StatelyDB Store. Creating and modifying Stores is done by
 * stately.dbmanagement.ManagementService.
 *
 * @generated from service stately.db.DatabaseService
 */
export declare const DatabaseService: GenService<{
  /**
   * Put adds one or more Items to the Store, or replaces the Items if they
   * already exist. This will fail if the caller does not have permission to
   * create or update Items, if there is no schema registered for the provided
   * item type, or if an item is invalid. All puts are applied atomically;
   * either all will fail or all will succeed. If an item's schema specifies an
   * `initialValue` for one or more properties used in its key paths, and the
   * item is new, you should not provide those values - the database will choose
   * them for you, and Data must be provided as either serialized binary
   * protobuf or JSON.
   *
   * @generated from rpc stately.db.DatabaseService.Put
   */
  put: {
    methodKind: "unary";
    input: typeof PutRequestSchema;
    output: typeof PutResponseSchema;
  };
  /**
   * Get retrieves one or more Items by their key paths. This will return any of
   * the Items that exist. It will fail if the caller does not have permission
   * to read Items. Use the List APIs if you want to retrieve multiple items but
   * don't already know the full key paths of the items you want to get.
   *
   * @generated from rpc stately.db.DatabaseService.Get
   */
  get: {
    methodKind: "unary";
    input: typeof GetRequestSchema;
    output: typeof GetResponseSchema;
  };
  /**
   * Delete removes one or more Items from the Store by their key paths. This
   * will fail if the caller does not have permission to delete Items.
   * Tombstones will be saved for deleted items for  time, so
   * that SyncList can return information about deleted items. Deletes are
   * always applied atomically; all will fail or all will succeed.
   *
   * @generated from rpc stately.db.DatabaseService.Delete
   */
  delete: {
    methodKind: "unary";
    input: typeof DeleteRequestSchema;
    output: typeof DeleteResponseSchema;
  };
  /**
   * BeginList retrieves Items that start with a specified key path prefix. The
   * key path prefix must minimally contain a Group Key (an item type and an
   * item ID). BeginList will return an empty result set if there are no items
   * matching that key prefix. This API returns a token that you can pass to
   * ContinueList to expand the result set, or to SyncList to get updates within
   * the result set. This can fail if the caller does not have permission to
   * read Items.
   * buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
   *
   * @generated from rpc stately.db.DatabaseService.BeginList
   */
  beginList: {
    methodKind: "server_streaming";
    input: typeof BeginListRequestSchema;
    output: typeof ListResponseSchema;
  };
  /**
   * ContinueList takes the token from a BeginList call and returns more results
   * based on the original query parameters and pagination options. It has very
   * few options of its own because it is a continuation of a previous list
   * operation. It will return a new token which can be used for another
   * ContinueList call, and so on. The token is the same one used by SyncList -
   * each time you call either ContinueList or SyncList, you should pass the
   * latest version of the token, and then use the new token from the result in
   * subsequent calls. You may interleave ContinueList and SyncList calls
   * however you like, but it does not make sense to make both calls in
   * parallel. Calls to ContinueList are tied to the authorization of the
   * original BeginList call, so if the original BeginList call was allowed,
   * ContinueList with its token should also be allowed.
   * buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
   *
   * @generated from rpc stately.db.DatabaseService.ContinueList
   */
  continueList: {
    methodKind: "server_streaming";
    input: typeof ContinueListRequestSchema;
    output: typeof ListResponseSchema;
  };
  /**
   * SyncList returns all changes to Items within the result set of a previous
   * List operation. For all Items within the result set that were modified, it
   * returns the full Item at in its current state. It also returns a list of
   * Item key paths that were deleted since the last SyncList, which you should
   * reconcile with your view of items returned from previous
   * BeginList/ContinueList calls. Using this API, you can start with an initial
   * set of items from BeginList, and then stay up to date on any changes via
   * repeated SyncList requests over time. The token is the same one used by
   * ContinueList - each time you call either ContinueList or SyncList, you
   * should pass the latest version of the token, and then use the new token
   * from the result in subsequent calls. Note that if the result set has
   * already been expanded to the end (in the direction of the original
   * BeginList request), SyncList will return newly created Items. You may
   * interleave ContinueList and SyncList calls however you like, but it does
   * not make sense to make both calls in parallel. Calls to SyncList are tied
   * to the authorization of the original BeginList call, so if the original
   * BeginList call was allowed, SyncList with its token should also be allowed.
   *
   * @generated from rpc stately.db.DatabaseService.SyncList
   */
  syncList: {
    methodKind: "server_streaming";
    input: typeof SyncListRequestSchema;
    output: typeof SyncListResponseSchema;
  };
  /**
   * Transaction performs a transaction, within which you can issue writes
   * (Put/Delete) and reads (Get/List) in any order, followed by a commit
   * message. Reads are guaranteed to reflect the state as of when the
   * transaction started, and writes are committed atomically. This method may
   * fail if another transaction commits before this one finishes - in that
   * case, you should retry your transaction.
   *
   * @generated from rpc stately.db.DatabaseService.Transaction
   */
  transaction: {
    methodKind: "bidi_streaming";
    input: typeof TransactionRequestSchema;
    output: typeof TransactionResponseSchema;
  };
  /**
   * ScanRootPaths lists root paths (Groups) in the Store. This is a very
   * expensive operation, as it must consult multiple partitions and it reads
   * and ignores a lot of data. It is provided for use in the web console's data
   * browser and is not exposed to customers. This operation will fail if the
   * caller does not have permission to read Items.
   *
   * @generated from rpc stately.db.DatabaseService.ScanRootPaths
   */
  scanRootPaths: {
    methodKind: "unary";
    input: typeof ScanRootPathsRequestSchema;
    output: typeof ScanRootPathsResponseSchema;
  };
}>;
